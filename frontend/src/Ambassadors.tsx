// src/Ambassadors.tsx
import React, { useState } from 'react';
import Button from '@atlaskit/button';
import Textfield from '@atlaskit/textfield';
import DropdownMenu, { DropdownItem, DropdownItemGroup } from '@atlaskit/dropdown-menu';
import DynamicTable from '@atlaskit/dynamic-table';
import type { HeadType, RowType } from '@atlaskit/dynamic-table/types';

interface AmbassadorRecord {
  id: number;
  customField: string;
  context: string;
  contextDescription: string;
  createdAt: string;
}

interface UserGroup {
  id: string;
  initials: string;
  name: string;
  ambassadors: AmbassadorRecord[];
}

const userGroups: UserGroup[] = [
  {
    id: 'jb',
    initials: 'JB',
    name: 'Jessica Brown',
    ambassadors: [
      {
        id: 1,
        customField: 'Catégorie',
        context: 'Système de configuration par défaut',
        contextDescription: 'Système de configuration par défaut généré par JIRA',
        createdAt: '5 hr ago',
      },
      {
        id: 2,
        customField: 'Catégorie',
        context: 'WMTEST Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: WMTEST',
        createdAt: '5 hr ago',
      },
      {
        id: 3,
        customField: 'Catégorie',
        context: 'Onboarding Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: Onboarding',
        createdAt: '5 hr ago',
      },
      {
        id: 4,
        customField: 'Catégorie',
        context: 'Sales Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: Sales',
        createdAt: '5 hr ago',
      },
      {
        id: 5,
        customField: 'Priority',
        context: 'Global Priority Scheme',
        contextDescription: 'Default priority values configured by Jira',
        createdAt: '1 day ago',
      },
      {
        id: 6,
        customField: 'Severity',
        context: 'Bug Severity Scheme',
        contextDescription: 'Configured severities: Blocker, Critical, Major…',
        createdAt: '2 days ago',
      },
    ],
  },
  {
    id: 'km',
    initials: 'KM',
    name: 'Kazuya Morimoto',
    ambassadors: [
      {
        id: 7,
        customField: 'Catégorie',
        context: 'Système de configuration par défaut',
        contextDescription: 'Système de configuration par défaut généré par JIRA',
        createdAt: '5 hr ago',
      },
      {
        id: 8,
        customField: 'Catégorie',
        context: 'WMTEST Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: WMTEST',
        createdAt: '5 hr ago',
      },
      {
        id: 9,
        customField: 'Catégorie',
        context: 'Onboarding Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: Onboarding',
        createdAt: '5 hr ago',
      },
      {
        id: 10,
        customField: 'Catégorie',
        context: 'Sales Project Scheme',
        contextDescription: 'Category Field Config Scheme for Project: Sales',
        createdAt: '5 hr ago',
      },
      {
        id: 11,
        customField: 'Company size',
        context: 'Default Company size Scheme',
        contextDescription: 'Default configuration scheme generated by Jira',
        createdAt: '12 min ago',
      },
      {
        id: 12,
        customField: 'Release Date',
        context: 'Release Planning Scheme',
        contextDescription: 'Configured release dates for upcoming versions',
        createdAt: '3 days ago',
      },
    ],
  },
  {
    id: 'am',
    initials: 'AM',
    name: 'Alejandro Martinez',
    ambassadors: [
      {
        id: 13,
        customField: 'Environment',
        context: 'Dev/Test/UAT Scheme',
        contextDescription: 'Custom field to select deployment environment',
        createdAt: '30 min ago',
      },
      {
        id: 14,
        customField: 'Risk Level',
        context: 'Risk Assessment Scheme',
        contextDescription: 'High, Medium, Low options for risk level',
        createdAt: '2 hr ago',
      },
      {
        id: 15,
        customField: 'Customer Type',
        context: 'Customer Segmentation Scheme',
        contextDescription: 'Segment customers by type: Enterprise, SMB…',
        createdAt: '1 day ago',
      },
      {
        id: 16,
        customField: 'SLM',
        context: 'Service Level Management',
        contextDescription: 'Defines SLA categories for issues',
        createdAt: '5 days ago',
      },
      {
        id: 17,
        customField: 'Budget',
        context: 'Project Budget Scheme',
        contextDescription: 'Fields to capture and track project budgets',
        createdAt: '1 week ago',
      },
    ],
  },
];

const Ambassadors: React.FC = () => {
  const [userFilter, setUserFilter] = useState<string>('');
  const [fieldFilter, setFieldFilter] = useState<string | null>(null);
  const [contextFilter, setContextFilter] = useState<string | null>(null);

  const head: HeadType = {
    cells: [
      { key: 'customField', content: 'Custom Field' },
      { key: 'context', content: 'Context' },
      { key: 'desc', content: 'Context Description' },
      { key: 'createdAt', content: 'Created At' },
      { key: 'actions', content: 'Actions' },
    ],
  };

  // Simple filter logic
  const filteredUsers = userGroups.filter(u =>
    u.name.toLowerCase().includes(userFilter.toLowerCase())
  );

  return (
    <div style={{ padding: 16 }}>
      {/* ─────────── Filters Toolbar ─────────── */}
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginBottom: 16 }}>
        <Textfield
          name="userFilter"
          value={userFilter}
          placeholder="Enter people or teams…"
          onChange={e => setUserFilter(e.currentTarget.value)}
        />

        <DropdownMenu trigger="Custom Field">
          <DropdownItemGroup>
            <DropdownItem onClick={() => setFieldFilter(null)}>All fields</DropdownItem>
            <DropdownItem onClick={() => setFieldFilter('Catégorie')}>Catégorie</DropdownItem>
            <DropdownItem onClick={() => setFieldFilter('Company size')}>Company size</DropdownItem>
          </DropdownItemGroup>
        </DropdownMenu>

        <DropdownMenu trigger="Context">
          <DropdownItemGroup>
            <DropdownItem onClick={() => setContextFilter(null)}>All contexts</DropdownItem>
            <DropdownItem onClick={() => setContextFilter('Système')}>Système…</DropdownItem>
            <DropdownItem onClick={() => setContextFilter('Default')}>Default…</DropdownItem>
          </DropdownItemGroup>
        </DropdownMenu>

        <Button appearance="subtle" onClick={() => {
          setUserFilter('');
          setFieldFilter(null);
          setContextFilter(null);
        }}>
          Reset Filters
        </Button>

        <div style={{ marginLeft: 'auto' }}>
          <Button appearance="primary">New Ambassador</Button>
        </div>
      </div>

      {/* ─────────── One Table per User ─────────── */}
      {filteredUsers.map((user) => {
        // Filter each user’s ambassadors
        const rows: RowType[] = user.ambassadors
          .filter(a =>
            !fieldFilter || a.customField.toLowerCase().includes(fieldFilter.toLowerCase())
          )
          .filter(a =>
            !contextFilter || a.context.toLowerCase().includes(contextFilter.toLowerCase())
          )
          .map(a => ({
            key: `amb-${user.id}-${a.id}`,
            cells: [
              { key: `cf-${a.id}`, content: a.customField },
              { key: `ctx-${a.id}`, content: a.context },
              { key: `desc-${a.id}`, content: a.contextDescription },
              { key: `ca-${a.id}`, content: a.createdAt },
              {
                key: `action-${a.id}`,
                content: <Button appearance="subtle-link">Revoke</Button>,
              },
            ],
          }));

        if (rows.length === 0) return null;

        return (
          <div key={user.id} style={{ marginBottom: 32 }}>
            {/* User header */}
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
              <div
                style={{
                  width: 32,
                  height: 32,
                  borderRadius: '50%',
                  backgroundColor: '#0747A6',
                  color: 'white',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginRight: 8,
                  fontWeight: 700,
                }}
              >
                {user.initials}
              </div>
              <h2 style={{ margin: 0 }}>{user.name}</h2>
            </div>

            {/* DynamicTable for this user */}
            <DynamicTable
              head={head}
              rows={rows}
              rowsPerPage={5}
              isFixedSize
            />
          </div>
        );
      })}
    </div>
  );
};

export default Ambassadors;
